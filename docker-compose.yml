version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:
### PostgreSQL ###########################################
    postgres:
      build:
        context: ./.docker/postgres
        args:
          - POSTGRES_VERSION=${POSTGRES_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      restart: always
      networks:
        - backend

### pgAdmin ##############################################
    pgadmin:
      user: root 
      image: dpage/pgadmin4:latest
      environment:
        - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
        - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
      ports:
        - "${PGADMIN_PORT}:80"
      volumes:
        - ${DATA_PATH_HOST}/pgadmin:/var/lib/pgadmin
      depends_on:
        - postgres
      restart: always
      networks:
        - frontend
        - backend
      
### frontend ##############################################

    nginx:
      image: docker.io/bitnami/nginx:1.23
      ports: 
        - '80:8080'
    # environment:
    #   - REACT_IP=${REACT_IP}
      volumes:
        - .docker/frontend:/app
      restart: always
      networks:
        - backend

### backend ##############################################

    backend:
      build: .docker/backend
      ports: 
        - '8080:8080'
    # environment:
    #     - POSTGRES_PORT=${POSTGRES_PORT}
    #     # - POSTGRES_DB=${POSTGRES_DB}
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #     # - POSTGRES_IP=${POSTGRES_IP}
      restart: always
      networks:
        - backend